{{#imports}}
/// <reference path="{{&.}}" />
{{/imports}}
import {
{{#definitions}}
{{&name}},
{{/definitions}}
} from './api-types';
import * as qs from 'querystring';

export * from './api-types';

export type ServiceConfig = {
    domain: string;
    protocol: 'https' | 'http';
    port: number;
};

const INTERNAL_MAP = new WeakMap();

function INTERNAL(object: {{&className}}){
  if(!INTERNAL_MAP.has(object))
  {
      INTERNAL_MAP.set(object, {});
  }
  return INTERNAL_MAP.get(object) as ServiceConfig;
}


import fetchPonyfill = require('fetch-ponyfill');
import fetchType from 'node-fetch';
import * as fetchTypes from 'node-fetch';

const {fetch, Request}: {
    fetch: typeof fetchType,
    Request: typeof fetchTypes.Request
} = fetchPonyfill();

class HttpResponseError extends Error {
    public readonly code: number | string;
    public readonly message: string;
    public readonly status: number;
    public readonly statusText: string;

    constructor({code, message, status, statusText}: {code: number | string, message: string, status: number, statusText: string}){
        super();
        this.code = code;
        this.message = message;
        this.status = status;
        this.statusText = statusText;
    }
}

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class {{&className}} {

    public get domain(): string{
        return INTERNAL(this).domain;
    }
    public get protocol(): 'http' | 'https' {
        return INTERNAL(this).protocol;
    }
    public get port(): number{
        return INTERNAL(this).port;
    }

    constructor(
        {domain = "", protocol = 'https', port = 80}:
        {domain: string, protocol: 'http' | 'https', port: number}
    ){
        if (typeof domain !== 'string') {
            throw new TypeError('domain must be a string');
        }
        else if ((protocol as string) !== 'http' && (protocol as string) !== 'https') {
            throw new TypeError('protocol must be "http" or "https"');
        }
        else if (typeof port !== 'number'){
            throw new TypeError('port must be a number');
        }
        INTERNAL(this).domain = domain;
        INTERNAL(this).protocol = protocol;
        INTERNAL(this).port = port;
    }

{{#methods}}
    {{> method}}

{{/methods}}
}
